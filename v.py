import os
import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# ЁЯФ╣ рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдмреЙрдЯ рдЯреЛрдХрди рдФрд░ рдЪреИрдирд▓ рд▓рд┐рдВрдХ
BOT_TOKEN = "7612290520:AAHUwfiZdxhmZ-JhNqM6cDdXV9QCWkSm9fA"  # рдЕрдкрдирд╛ рдмреЙрдЯ рдЯреЛрдХрди рдбрд╛рд▓реЗрдВ
CHANNEL_ID = -1002363906868  # рдЕрдкрдиреЗ рдЪреИрдирд▓ рдХрд╛ ID рдбрд╛рд▓реЗрдВ
CHANNEL_LINK = "https://t.me/seedhe_maut"  # рдЪреИрдирд▓ рдХрд╛ рдЗрдиреНрд╡рд╛рдЗрдЯ рд▓рд┐рдВрдХ

# ЁЯФ╣ рдмреЙрдЯ рд╕реЗрдЯрдЕрдк
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

# ЁЯФ╣ рд╡реЗрд░рд┐рдлрд╛рдЗрдб рдпреВрдЬрд╝рд░реНрд╕ рдХреА рд▓рд┐рд╕реНрдЯ (RAM рдореЗрдВ рд╕реНрдЯреЛрд░)
verified_users = set()

# ЁЯФ╣ рдпреВрдЬрд░ рдЪреИрдирд▓ рдореЗрдВ рдЬреЙрдЗрди рд╣реИ рдпрд╛ рдирд╣реАрдВ
async def is_user_member(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False

# ЁЯФ╣ /start рдХрдорд╛рдВрдб (рдЪреИрдирд▓ рдЬреЙрдЗрди рдЪреЗрдХ + /maut рдмрдЯрди рд╣рд╛рдЗрдб)
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id

    if user_id in verified_users:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="/maut")]],
            resize_keyboard=True
        )
        await message.reply("тЬЕ You are already verified! Click `/maut` to check proxies.", reply_markup=keyboard)
        return

    if not await is_user_member(user_id):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="ЁЯФ╣ Join Channel", url=CHANNEL_LINK)],
                [InlineKeyboardButton(text="тЬЕ I've Joined", callback_data="check_join")]
            ]
        )
        await message.reply("тЪа **To use this bot, please join our channel first!**", reply_markup=keyboard)
    else:
        verified_users.add(user_id)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="/maut")]],
            resize_keyboard=True
        )
        await message.reply("тЬЕ You are verified! Click `/maut` to check proxies.", reply_markup=keyboard)

# ЁЯФ╣ "I've Joined" рдмрдЯрди рд╣реИрдВрдбрд▓рд░ (рдЕрдм `/maut` рджрд┐рдЦреЗрдЧрд╛)
@dp.callback_query(lambda call: call.data == "check_join")
async def check_join(call: types.CallbackQuery):
    user_id = call.from_user.id

    if await is_user_member(user_id):
        verified_users.add(user_id)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="/maut")]],
            resize_keyboard=True
        )
        await call.message.edit_text("тЬЕ Thank you for joining! Now click `/maut` to check proxies.", reply_markup=keyboard)
    else:
        await call.answer("тЭМ You haven't joined the channel yet!", show_alert=True)

# ЁЯФ╣ `/maut` рддрднреА рдЪрд▓реЗрдЧрд╛ рдЬрдм рдпреВрдЬрд░ рд╡реЗрд░рд┐рдлрд╛рдЗрдб рд╣реЛрдЧрд╛
@dp.message(Command("maut"))
async def maut(message: types.Message):
    user_id = message.from_user.id

    if user_id not in verified_users:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="ЁЯФ╣ Join Channel", url=CHANNEL_LINK)],
                [InlineKeyboardButton(text="тЬЕ I've Joined", callback_data="check_join")]
            ]
        )
        await message.reply("тЪа **You must join our channel first!**", reply_markup=keyboard)
        return

    await message.reply("ЁЯСЛ Hello! Send me any **text file** (ЁЯУД `.txt`, `.csv`, `.log`, `.json`, etc.), and I will check proxies.")

# ЁЯФ╣ рдкреНрд░реЙрдХреНрд╕реА рдЪреЗрдХ рдХрд░рдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди
async def check_proxies(file_path, message):
    timeout = 5
    working_proxies = []
    bad_proxies = []

    with open(file_path, "r", encoding="utf-8", errors="ignore") as file:
        proxies = file.read().splitlines()

    total_proxies = len(proxies)
    checked_count = 0

    for proxy in proxies:
        proxy = proxy.strip()
        if not proxy:
            continue  

        proxy_dict = {"http": f"http://{proxy}", "https": f"http://{proxy}"}

        try:
            response = requests.get("http://httpbin.org/ip", proxies=proxy_dict, timeout=timeout)
            if response.status_code == 200:
                working_proxies.append(proxy)
            else:
                bad_proxies.append(proxy)
        except requests.RequestException:
            bad_proxies.append(proxy)

        checked_count += 1

        # ЁЯФ╣ рд╣рд░ 5 рдкреНрд░реЙрдХреНрд╕реА рдХреЗ рдмрд╛рдж рдЕрдкрдбреЗрдЯ рднреЗрдЬреЛ
        if checked_count % 5 == 0 or checked_count == total_proxies:
            await message.edit_text(f"ЁЯФД Checking Proxies...\nтЬЕ Working: {len(working_proxies)}\nтЭМ Not Working: {len(bad_proxies)}\nтП│ Total Checked: {checked_count}/{total_proxies}")

        await asyncio.sleep(0.5)  

    # ЁЯФ╣ рд░рд┐рдЬрд▓реНрдЯ рдлрд╛рдЗрд▓ рдмрдирд╛рдПрдВ
    working_file = "maut тЬЕ.txt"
    bad_file = "maut тЭМ.txt"

    with open(working_file, "w") as wf:
        wf.write("\n".join(working_proxies))

    with open(bad_file, "w") as bf:
        bf.write("\n".join(bad_proxies))

    return working_file, bad_file, len(working_proxies), len(bad_proxies)

# ЁЯФ╣ рдЬрдм рдпреВрдЬрд╝рд░ рдХреЛрдИ рдлрд╝рд╛рдЗрд▓ рднреЗрдЬреЗ
@dp.message(lambda message: message.document)
async def handle_document(message: types.Message):
    user_id = message.from_user.id

    if user_id not in verified_users:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="ЁЯФ╣ Join Channel", url=CHANNEL_LINK)],
                [InlineKeyboardButton(text="тЬЕ I've Joined", callback_data="check_join")]
            ]
        )
        await message.reply("тЪа **You must join our channel first!**", reply_markup=keyboard)
        return

    file_id = message.document.file_id
    file_name = message.document.file_name

    # ЁЯФ╣ рд╕рдкреЛрд░реНрдЯреЗрдб рдЯреЗрдХреНрд╕реНрдЯ рдлреЙрд░реНрдореЗрдЯреНрд╕
    allowed_formats = [".txt", ".csv", ".log", ".json"]
    
    if not any(file_name.endswith(ext) for ext in allowed_formats):
        await message.reply("тЪа Please send a **valid text file** (`.txt`, `.csv`, `.log`, `.json`).")
        return

    # ЁЯФ╣ рдлрд╝рд╛рдЗрд▓ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ
    file_path = f"downloads/{file_name}"
    os.makedirs("downloads", exist_ok=True)
    
    file_info = await bot.get_file(file_id)
    await bot.download_file(file_info.file_path, file_path)

    msg = await message.reply("ЁЯФН Checking proxies... Please wait.")

    # ЁЯФ╣ рдкреНрд░реЙрдХреНрд╕реА рдЪреЗрдХ рдХрд░реЗрдВ (рдкреНрд░реЙрд╕реЗрд╕рд┐рдВрдЧ рд╕реНрдХреНрд░реАрди рджрд┐рдЦрд╛рддреЗ рд╣реБрдП)
    working_file, bad_file, working_count, bad_count = await check_proxies(file_path, msg)

    # ЁЯФ╣ рдлрд╛рдЗрдирд▓ рд░рд┐рдЬрд▓реНрдЯ рднреЗрдЬреЗрдВ
    await msg.edit_text(f"тЬЕ Proxy checking completed!\n\nтЬЕ **Working:** {working_count}\nтЭМ **Not Working:** {bad_count}")

    # ЁЯФ╣ рд╡рд░реНрдХрд┐рдВрдЧ рдкреНрд░реЙрдХреНрд╕реА рднреЗрдЬреЛ
    if working_count > 0:
        with open(working_file, "rb") as file:
            await message.reply_document(BufferedInputFile(file.read(), working_file))
    else:
        await message.reply("тЭМ No working proxies found!")

    # ЁЯФ╣ рдЦрд░рд╛рдм рдкреНрд░реЙрдХреНрд╕реА рднреЗрдЬреЛ
    if bad_count > 0:
        with open(bad_file, "rb") as file:
            await message.reply_document(BufferedInputFile(file.read(), bad_file))
    else:
        await message.reply("тЬЕ All proxies are working!")

    # ЁЯФ╣ рдХреНрд▓реАрдирдЕрдк (рдкреБрд░рд╛рдиреА рдлрд╝рд╛рдЗрд▓реЗрдВ рд╣рдЯрд╛рдПрдВ)
    os.remove(file_path)
    os.remove(working_file)
    os.remove(bad_file)

# ЁЯФ╣ рдмреЙрдЯ рд╕реНрдЯрд╛рд░реНрдЯ рдХрд░рдиреЗ рдХрд╛ рддрд░реАрдХрд╛
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
