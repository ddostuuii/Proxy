import os
import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ЁЯФ╣ рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдмреЙрдЯ рдЯреЛрдХрди
BOT_TOKEN = "8018672833:AAEzaymr68hGginHA4uLbcc0moacOFxwO5c"

# ЁЯФ╣ рдмреЙрдЯ рдФрд░ рдбрд┐рд╕реНрдкреИрдЪрд░ рд╕реЗрдЯрдЕрдк
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ЁЯФ╣ рдкреНрд░реЙрдХреНрд╕реА рдЪреЗрдХ рдХрд░рдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди
async def check_proxies(file_path, message):
    timeout = 5
    working_proxies = []
    bad_proxies = []

    with open(file_path, "r", encoding="utf-8", errors="ignore") as file:
        proxies = file.read().splitlines()

    total_proxies = len(proxies)
    checked_count = 0

    for proxy in proxies:
        proxy = proxy.strip()
        if not proxy:
            continue  

        proxy_dict = {"http": f"http://{proxy}", "https": f"http://{proxy}"}

        try:
            response = requests.get("http://httpbin.org/ip", proxies=proxy_dict, timeout=timeout)
            if response.status_code == 200:
                working_proxies.append(proxy)
            else:
                bad_proxies.append(proxy)
        except requests.RequestException:
            bad_proxies.append(proxy)

        checked_count += 1

        # ЁЯФ╣ рд╣рд░ 5 рдкреНрд░реЙрдХреНрд╕реА рдХреЗ рдмрд╛рдж рдЕрдкрдбреЗрдЯ рднреЗрдЬреЛ
        if checked_count % 5 == 0 or checked_count == total_proxies:
            await message.edit_text(f"ЁЯФД Checking Proxies...\nтЬЕ Working: {len(working_proxies)}\nтЭМ Not Working: {len(bad_proxies)}\nтП│ Total Checked: {checked_count}/{total_proxies}")

        await asyncio.sleep(0.5)  

    # ЁЯФ╣ рд░рд┐рдЬрд▓реНрдЯ рдлрд╛рдЗрд▓ рдмрдирд╛рдПрдВ
    working_file = "maut тЬЕ.txt"
    bad_file = "maut тЭМ.txt"

    with open(working_file, "w") as wf:
        wf.write("\n".join(working_proxies))

    with open(bad_file, "w") as bf:
        bf.write("\n".join(bad_proxies))

    return working_file, bad_file, len(working_proxies), len(bad_proxies)

# ЁЯФ╣ /start рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply("ЁЯСЛ Hello! Send me any **text file** (ЁЯУД `.txt`, `.csv`, `.log`, `.json`, etc.), and I will check proxies.")

# ЁЯФ╣ рдЬрдм рдпреВрдЬрд╝рд░ рдХреЛрдИ рдлрд╝рд╛рдЗрд▓ рднреЗрдЬреЗ
@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    file_id = message.document.file_id
    file_name = message.document.file_name

    # ЁЯФ╣ рд╕рдкреЛрд░реНрдЯреЗрдб рдЯреЗрдХреНрд╕реНрдЯ рдлреЙрд░реНрдореЗрдЯреНрд╕
    allowed_formats = [".txt", ".csv", ".log", ".json"]
    
    if not any(file_name.endswith(ext) for ext in allowed_formats):
        await message.reply("тЪа Please send a **valid text file** (`.txt`, `.csv`, `.log`, `.json`).")
        return

    # ЁЯФ╣ рдлрд╝рд╛рдЗрд▓ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ
    file_path = f"downloads/{file_name}"
    os.makedirs("downloads", exist_ok=True)
    
    file_info = await bot.get_file(file_id)
    await bot.download_file(file_info.file_path, file_path)

    msg = await message.reply("ЁЯФН Checking proxies... Please wait.")

    # ЁЯФ╣ рдкреНрд░реЙрдХреНрд╕реА рдЪреЗрдХ рдХрд░реЗрдВ (рдкреНрд░реЙрд╕реЗрд╕рд┐рдВрдЧ рд╕реНрдХреНрд░реАрди рджрд┐рдЦрд╛рддреЗ рд╣реБрдП)
    working_file, bad_file, working_count, bad_count = await check_proxies(file_path, msg)

    # ЁЯФ╣ рдлрд╛рдЗрдирд▓ рд░рд┐рдЬрд▓реНрдЯ рднреЗрдЬреЗрдВ
    await msg.edit_text(f"тЬЕ Proxy checking completed!\n\nтЬЕ **Working:** {working_count}\nтЭМ **Not Working:** {bad_count}")

    # ЁЯФ╣ рд╡рд░реНрдХрд┐рдВрдЧ рдкреНрд░реЙрдХреНрд╕реА рднреЗрдЬреЛ (FSInputFile рд╣рдЯрд╛ рдХрд░ `types.InputFile` рдпреВрдЬрд╝ рдХрд░реЛ)
    if working_count > 0:
        await message.reply_document(types.InputFile(working_file))
    else:
        await message.reply("тЭМ No working proxies found!")

    # ЁЯФ╣ рдЦрд░рд╛рдм рдкреНрд░реЙрдХреНрд╕реА рднреЗрдЬреЛ
    if bad_count > 0:
        await message.reply_document(types.InputFile(bad_file))
    else:
        await message.reply("тЬЕ All proxies are working!")

    # ЁЯФ╣ рдХреНрд▓реАрдирдЕрдк (рдкреБрд░рд╛рдиреА рдлрд╝рд╛рдЗрд▓реЗрдВ рд╣рдЯрд╛рдПрдВ)
    os.remove(file_path)
    os.remove(working_file)
    os.remove(bad_file)

# ЁЯФ╣ рдмреЙрдЯ рд╕реНрдЯрд╛рд░реНрдЯ рдХрд░реЗрдВ
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
